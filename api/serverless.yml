service: escape-fridge

provider:
  name: aws
  runtime: nodejs6.10
  stage: production
  region: ap-southeast-2
  variableSyntax: "\\${((?!(AWS|iot))[ ~:a-zA-Z0-9._'\",\\-\\/\\(\\)]+?)}"
  environment:
    ENVIRONMENT: ${opt:stage, self:provider.stage}
    IOT_ENDPOINT: "a2lpba7qk5u1yv.iot.ap-southeast-2.amazonaws.com"
    THING_NAME: ${self:custom.thing_name}
    SERVICE: ${self:service}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "iot:Publish"
      Resource:
        - Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/pi"
    - Effect: "Allow"
      Action:
        - "iot:UpdateThingShadow"
      Resource:
        - Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:thing/${self:custom.thing_name}"
    - Effect: "Allow"
      Action:
        - "rekognition:DetectFaces"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource:
        - "arn:aws:s3:::${self:service}-${self:custom.stage}-faces/*"

functions:
  buttonClick:
    handler: src/button.click
    events:
      - iot:
          sql: "SELECT * FROM 'iotbutton/${self:custom.iotButtonDSN}'"
  s3Trigger:
    handler: src/s3.processImage

resources:
  Resources:
    IoTThing:
      Type: AWS::IoT::Thing
      Properties:
        ThingName: "iotbutton_${self:custom.iotButtonDSN}"
    IoTPolicy:
      Type: AWS::IoT::Policy
      Properties:
        PolicyName: "${self:service}-button-${self:custom.stage}"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action: "iot:Publish"
              Effect: "Allow"
              Resource:
                Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/iotbutton/${self:custom.iotButtonDSN}"
    IoTPolicyPi:
      Type: AWS::IoT::Policy
      Properties:
        PolicyName: "${self:service}-pi-${self:custom.stage}"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                "iot:Subscribe"
              Effect: "Allow"
              Resource:
                - Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/pi"
                - Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/$aws/things/${!iot:Connection.Thing.ThingName}/shadow/*"
            - Action:
                - "iot:Receive"
                - "iot:Publish"
              Effect: "Allow"
              Resource:
                - Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/things/${!iot:Connection.Thing.ThingName}/shadow/*"
            - Action:
                - "iot:Receive"
              Effect: "Allow"
              Resource:
                - Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/pi"
    IoTPolicyPrincipalAttachment:
      Type: AWS::IoT::PolicyPrincipalAttachment
      Properties:
        PolicyName:
          Ref: "IoTPolicy"
        Principal: "${self:custom.iotCertificateArn}"
    IoTThingPrincipalAttachment:
      Type: AWS::IoT::ThingPrincipalAttachment
      Properties:
        Principal: "${self:custom.iotCertificateArn}"
        ThingName:
          Ref: "IoTThing"
    S3BucketEscapeboothproductionfaces:
      DependsOn:
        - FaceDetectLambdaPermissionEscapeboothproductionfacesS3
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:custom.stage}-faces
        AccessControl: BucketOwnerFullControl
        LifecycleConfiguration:
          Rules:
            - Id: RemoveOldPhotos
              Status: Enabled
              ExpirationInDays: 1
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
               - PUT
              AllowedOrigins:
               - '*'
              AllowedHeaders:
               - '*'
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: "s3:ObjectCreated:*"
              Function:
                Fn::GetAtt:
                  - FaceDetectLambdaFunction
                  - Arn
    FaceDetectLambdaPermissionEscapeboothproductionfacesS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - FaceDetectLambdaFunction
            - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:service}-${self:custom.stage}-faces"

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  iotButtonDSN: 'G030JF059367J79T'
  iotCertificateArn: 'arn:aws:iot:ap-southeast-2:750569066954:cert/9cbe48b0e208cf2e9f226240e5c8471c7526241f070e8dbba007d334601ac240'
  thing_name: pi

plugins:
  - serverless-webpack


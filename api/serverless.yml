service: escape-booth

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs6.10
  stage: production
  region: ap-southeast-2
  environment:
    ENVIRONMENT: ${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Scan"
      Resource:
        - { "Fn::Join" : [":", ["arn:aws:dynamodb:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "table/${self:service}-${self:custom.stage}-users" ] ]  }
        - { "Fn::Join" : [":", ["arn:aws:dynamodb:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "table/${self:service}-${self:custom.stage}-leaderboard" ] ]  }

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  iotButtonDSN: 'G030JF059367J79T'
  iotCertificateArn: 'arn:aws:iot:ap-southeast-2:119243932312:cert/f2986a97ca9a89a97a277433b61bd8bfd5e00a13d3463362d98e021a1f37715f'

functions:
  userCreate:
    handler: src/user.create
    events:
      - http:
          path: user
          method: post
  leaderboardCreate:
    handler: src/leaderboard.create
    events:
      - http:
          path: leaderboard
          method: post
  leaderboardUpdate:
    handler: src/leaderboard.update
    events:
      - http:
          path: leaderboard
          method: put
  leaderboardGet:
    handler: src/leaderboard.get
    events:
      - http:
          path: leaderboard
          method: get

  buttonClick:
    handler: src/button.click
    events:
      - iot:
          sql: "SELECT * FROM 'iotbutton/${self:custom.iotButtonDSN}'"

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:service}-${self:custom.stage}-users"
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Leaderboard:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:service}-${self:custom.stage}-leaderboard"
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    IoTThing:
      Type: AWS::IoT::Thing
      Properties:
        ThingName:
          Fn::Join: [ "", [ "iotbutton_", "${self:custom.iotButtonDSN}" ] ]
    IoTPolicy:
      Type: AWS::IoT::Policy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action: "iot:Publish"
              Effect: "Allow"
              Resource:
                Fn::Join: [ "", [ "arn:aws:iot:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":topic/iotbutton/", "${self:custom.iotButtonDSN}" ] ]
    IoTPolicyPrincipalAttachment:
      Type: AWS::IoT::PolicyPrincipalAttachment
      Properties:
        PolicyName:
          Ref: "IoTPolicy"
        Principal: "${self:custom.iotCertificateArn}"
    IoTThingPrincipalAttachment:
      Type: AWS::IoT::ThingPrincipalAttachment
      Properties:
        Principal: "${self:custom.iotCertificateArn}"
        ThingName:
          Ref: "IoTThing"

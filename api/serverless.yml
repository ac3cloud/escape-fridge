service: escape-booth-2

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs6.10
  stage: production
  region: us-east-1
  variableSyntax: "\\${((?!(AWS|iot))[ ~:a-zA-Z0-9._'\",\\-\\/\\(\\)]+?)}"
  environment:
    ENVIRONMENT: ${opt:stage, self:provider.stage}
    IOT_ENDPOINT: "a13wgavph3aq68.iot.us-east-1.amazonaws.com"
    THING_NAME: ${self:custom.thing_name}
    SERVICE: ${self:service}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Scan"
      Resource:
        - { "Fn::Sub" : "arn:aws:dynamodb:${self:custom.region}:${AWS::AccountId}:table/${self:service}-${self:custom.stage}-users" }
        - { "Fn::Sub" : "arn:aws:dynamodb:${self:custom.region}:${AWS::AccountId}:table/${self:service}-${self:custom.stage}-leaderboard" }
    - Effect: "Allow"
      Action:
        - "iot:Publish"
      Resource:
        - Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/pi"
    - Effect: "Allow"
      Action:
        - "iot:UpdateThingShadow"
      Resource:
        - Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:thing/${self:custom.thing_name}"
    - Effect: "Allow"
      Action:
        - "rekognition:DetectFaces"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource:
        - "arn:aws:s3:::${self:service}-${self:custom.stage}-faces/*"

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  thing_name: pi-gregc
  iotButtonDSN: 'G030JF055364U26H'
  iotCertificateArn: 'arn:aws:iot:us-east-1:025705368789:cert/3b751fd3ad865e6e33f4afe1fe12dc453147d41b56e7be8aac55a897a0264a45'

functions:
  userCreate:
    handler: src/user.create
    events:
      - http:
          path: user
          method: post
  leaderboardCreate:
    handler: src/leaderboard.create
    events:
      - http:
          path: leaderboard
          method: post
  leaderboardUpdate:
    handler: src/leaderboard.update
    events:
      - http:
          path: leaderboard
          method: put
  leaderboardGet:
    handler: src/leaderboard.get
    events:
      - http:
          path: leaderboard
          method: get
  buttonClick:
    handler: src/button.click
    events:
      - iot:
          sql: "SELECT * FROM 'iotbutton/${self:custom.iotButtonDSN}'"
  faceDetect:
    handler: src/s3.processImage

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:service}-${self:custom.stage}-users"
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Leaderboard:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:service}-${self:custom.stage}-leaderboard"
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    IoTThing:
      Type: AWS::IoT::Thing
      Properties:
        ThingName: "iotbutton_${self:custom.iotButtonDSN}"
    IoTPolicy:
      Type: AWS::IoT::Policy
      Properties:
        PolicyName: "escape-booth-button-${self:custom.stage}"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action: "iot:Publish"
              Effect: "Allow"
              Resource:
                Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/iotbutton/${self:custom.iotButtonDSN}"
    IoTPolicyPi:
      Type: AWS::IoT::Policy
      Properties:
        PolicyName: "escape-booth-pi-${self:custom.stage}"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                "iot:Subscribe"
              Effect: "Allow"
              Resource:
                - Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/pi"
                - Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/$aws/things/${!iot:Connection.Thing.ThingName}/shadow/*"
            - Action:
                - "iot:Receive"
                - "iot:Publish"
              Effect: "Allow"
              Resource:
                - Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/things/${!iot:Connection.Thing.ThingName}/shadow/*"
            - Action:
                - "iot:Receive"
              Effect: "Allow"
              Resource:
                - Fn::Sub: "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/pi"
    IoTPolicyPrincipalAttachment:
      Type: AWS::IoT::PolicyPrincipalAttachment
      Properties:
        PolicyName:
          Ref: "IoTPolicy"
        Principal: "${self:custom.iotCertificateArn}"
    IoTThingPrincipalAttachment:
      Type: AWS::IoT::ThingPrincipalAttachment
      Properties:
        Principal: "${self:custom.iotCertificateArn}"
        ThingName:
          Ref: "IoTThing"
    S3BucketEscapebooth2productionfaces:
      DependsOn:
        - FaceDetectLambdaPermissionEscapeboothproductionfacesS3
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:custom.stage}-faces
        AccessControl: BucketOwnerFullControl
        LifecycleConfiguration:
          Rules:
            - Id: RemoveOldPhotos
              Status: Enabled
              ExpirationInDays: 1
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
               - PUT
              AllowedOrigins:
               - '*'
              AllowedHeaders:
               - '*'
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: "s3:ObjectCreated:*"
              Function:
                Fn::GetAtt:
                  - FaceDetectLambdaFunction
                  - Arn

    FaceDetectLambdaPermissionEscapeboothproductionfacesS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - FaceDetectLambdaFunction
            - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:service}-${self:custom.stage}-faces"
